'''data_structure = [
  [1, 2, 3],
  {'a': 4, 'b': 5},
  (6, {'cube': 7, 'drum': 8}),
  "Hello",
  ((), [{(2, 'Urban', ('Urban2', 35))}])
]
Увидев это студент задался вопросом: "А есть ли универсальное решение для подсчёта суммы всех чисел и длин всех строк?"
Да, выглядит страшно, да и обращаться нужно к каждой внутренней структуре (списку, словарю и т.д.) по-разному.
Ученику пришлось каждый раз использовать индексацию и обращение по ключам - универсального решения для таких структур он не нашёл.
Что должно быть подсчитано:
Все числа (не важно, являются они ключами или значениям или ещё чем-то).
Все строки (не важно, являются они ключами или значениям или ещё чем-то)
Для примера, указанного выше, расчёт вёлся следующим образом:
1 + 2 + 3 +len('a') + 4 + len('b') + 5 + 6 + len('cube') + 7 + .... + 35 = 99
Входные данные (применение функции):
data_structure = [
  [1, 2, 3],
  {'a': 4, 'b': 5},
  (6, {'cube': 7, 'drum': 8}),
  "Hello",
  ((), [{(2, 'Urban', ('Urban2', 35))}])
]
result = calculate_structure_sum(data_structure)
print(result)
Выходные данные (консоль):
99
Примечания (рекомендации):
Весь подсчёт должен выполняться одним вызовом функции.
Рекомендуется применить рекурсивный вызов функции, для каждой внутренней структуры.
Т.к. каждая структура может содержать в себе ещё несколько элементов, можно использовать параметр *args
Для определения типа данного используйте функцию isinstance.'''
data_structure = [
  [1, 2, 3],
  {'a': 4, 'b': 5},
  (6, {'cube': 7, 'drum': 8}),
  "Hello",
  ((), [{(2, 'Urban', ('Urban2', 35))}])
]
def sum_data(x):
  if isinstance(x, (int, float)):
    return x
  if isinstance(x, str):
    return len(x)
  if isinstance(x, (list, tuple)):
    if len(x) == 0:
      return 0
    return sum_data(x[0]) + sum_data(x[1:])
  if isinstance(x, set):
    return sum_data(list(x))
  if isinstance(x, dict):
    return sum_data(list(x.items()))
print(sum_data(data_structure))